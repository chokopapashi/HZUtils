/*
 * Copyright (c) 2013, Hidekatsu Hirose
 * Copyright (c) 2013, Hirose-Zouen
 * This file is subject to the terms and conditions defined in
 * This file is subject to the terms and conditions defined in
 * file 'LICENSE.txt', which is part of this source code package.
 */

package org.hirosezouen.hzutil

import java.io.BufferedReader
import java.io.File
import java.io.FileInputStream
import java.io.InputStream
import java.io.InputStreamReader
import java.io.OutputStream
import java.io.Reader
import java.io.Writer
import java.util.Properties

import scala.actors._
import scala.actors.Actor._
import scala.collection.mutable
import scala.io.Source
import scala.util.control.Exception._

import ch.qos.logback.classic.Level

import org.slf4j.Logger
import org.slf4j.LoggerFactory

object HZLog {
   /*
    * ch.qos.logback.classic.Level order
    * ALL < TRACE < DEBUG < INFO < WARN < ERROR < OFF
    */
    def getLogger(loggerName: String): Logger = LoggerFactory.getLogger(loggerName)
    def getLogger(cls: Class[_]): Logger = LoggerFactory.getLogger(cls)

    private def checkAndlog(level: Level, f: (Logger) => Unit)(implicit logger: Logger) =
        if(level.isGreaterOrEqual(logger.asInstanceOf[ch.qos.logback.classic.Logger].getEffectiveLevel)) f(logger)

    def log_info(msg: => String)(implicit logger: Logger) = checkAndlog(Level.INFO, (l) => l.info(msg))
    def log_error(msg: => String)(implicit logger: Logger) = checkAndlog(Level.ERROR, (l) => l.error(msg))
    def log_error(exp: Throwable)(implicit logger: Logger) = checkAndlog(Level.ERROR, (l) => l.error("",exp))
    def log_error(msg: => String, exp: Throwable)(implicit logger: Logger) = checkAndlog(Level.ERROR, (l) => l.error(msg,exp))
    def log_debug(msg: => String)(implicit logger: Logger) = checkAndlog(Level.DEBUG, (l) => logger.debug(msg))
    def log_debug(msg: => String, exp: Throwable)(implicit logger: Logger) = checkAndlog(Level.DEBUG, (l) => l.debug(msg,exp))
    def log_trace(msg: => String)(implicit logger: Logger) = checkAndlog(Level.TRACE, (l) => logger.trace(msg))
    def log_trace(msg: => String, exp: Throwable)(implicit logger: Logger) = checkAndlog(Level.TRACE, (l) => logger.trace(msg,exp))

    def l_t(msg: => String = "")(implicit logger: Logger): Unit = {
        if(logger.asInstanceOf[ch.qos.logback.classic.Logger].getEffectiveLevel.isGreaterOrEqual(Level.TRACE)) {
            val ste = new Throwable().getStackTrace().apply(1)
            logger.trace("%s():%d:%s".format(ste.getMethodName,ste.getLineNumber,msg))
        }
    }
    case class HZLogTrace(tag:String)
    def l_tt(msg: => String = "")(implicit logger: Logger, trc: HZLogTrace): Unit = {
        if(logger.asInstanceOf[ch.qos.logback.classic.Logger].getEffectiveLevel.isGreaterOrEqual(Level.TRACE)) {
            val ste = new Throwable().getStackTrace().apply(1)
            logger.trace("%s:%s():%d:%s".format(trc.tag,ste.getMethodName,ste.getLineNumber,msg))
        }
    }
    def l_t2(msg: => String)(implicit logger: Logger) = log_trace(msg)(logger)
}

object HZIO {
    def using[A](r: InputStream)(f: InputStream => A): A = try {
        f(r)
    } finally {
        r.close()
    }

    def using[A](r: OutputStream)(f: OutputStream => A): A = try {
        f(r)
    } finally {
        r.close()
    }

    def using[A](r: Source)(f: Source => A): A = try {
        f(r)
    } finally {
        r.close()
    }

    def using[A](r: Reader)(f: Reader => A): A = try {
        f(r)
    } finally {
        r.close()
    }
 
    def using[A](r: Writer)(f: Writer => A): A = try {
        f(r)
    } finally {
        r.close()
    }
}

object HZActor {
    import HZLog._
    implicit val logger = getLogger(this.getClass.getName)

    trait HZActorCommand
    case class HZStop() extends HZActorCommand 

    trait HZActorInformation

    trait HZActorReason
    trait HZActorStoped extends HZActorReason
    case class HZErrorStoped(th: Throwable) extends HZActorStoped
    case class HZNormalStoped() extends HZActorStoped
    case class HZCommandStoped() extends HZActorStoped
    case class HZUnknownReason(reason: Any) extends HZActorReason

    def defaultInputFilter(s: String) = s 

    def startInputActor(in: InputStream, filter: (String) => String = defaultInputFilter)
                       (input: PartialFunction[String,Unit]): Actor
    = {

        val parent = self
        val reader = new BufferedReader(new InputStreamReader(in))

        actor {
            link(parent)
            loop {
                catching(classOf[Exception]) either {
                    reader.readLine
                } match {
                    case Right(line) => {
                        log_debug("InputActor:Rignt(%s)".format(line))
                        (({
                            case null => {
                                exit(HZNormalStoped())
                            }
                        }: PartialFunction[String,Unit]) orElse input orElse({
                            case x => log_error("InputActor:unknown message:%s".format(x))
                        }: PartialFunction[String,Unit]))(filter(line))
                    }
                    case Left(th) => {
                        log_error("InputActor:Left(%s)".format(th.toString))
                        exit(HZErrorStoped(th))
                    }
                }
            }
        }
    }
}

sealed abstract class HZPropertyConcrete(val fileName: String, val charset: String) {
    import HZIO._

    protected lazy val prop: Properties = new Properties()
    def loadProperty() = {
        if(charset.length ==0) using(new FileInputStream(fileName))(r => prop.load(r))
        else using(new InputStreamReader(new FileInputStream(fileName),charset))(r => prop.load(r))
    }
    def apply(key: String): Option[String] = {
        val value = prop.getProperty(key)
        if(value == null) None
        else Some(value)
    }
    def isProperty(key: String): Boolean = {
        this(key) match {
            case Some(v) => new java.lang.Boolean(v)
            case None => false
        }
    }
}

case class HZProperty(fn: String, cs: String = "") extends HZPropertyConcrete(fn,cs)

/**
 * inner class にアクセスするときは、T#Sのように記述する。
 * Enumerationの要素(列挙子)はinner class 'Value'なので、
 * このように記述する必要がある。
 */
case class HZConfig(fn: String, cs: String = "") extends HZPropertyConcrete(fn,cs) {
    /**
     * apply()メソッドで、prop(key)のように値を取得できる。
     */
    def apply[A](key: HZConfig.Key[A]): A = key()(this)
    def optString[A](key: HZConfig.Key[A]): Option[String] = this(key.path)
    def optVal[A](key: HZConfig.Key[A]): Option[A] = key.optVal()(this)
    def isProperty[A](key: HZConfig.Key[A]): Boolean = isProperty(key.path)
}

class StringLeaf[A <: StringLeaf[A]](value: String, op: String, parent: StringNode[A,StringNode[A]]) {
    self =>

    def path(): String = {
        val p = parent.path()
        if(p.length == 0)
            value
        else
            p + op + value
    }
}

class StringNode[B <: StringLeaf[B], A <: StringNode[B]](value: String, op: String, parent: A) extends StringLeaf[A](value,op,parent) {
    self =>

    if(!(parent == null)) parent.addLeaf(self.asInstanceOf[A])

    var _leafs = Set.empty[A]

    protected def addLeaf[B](l: B): B = {
        _leafs += l.asInstanceOf[A]
        l
    }

//    def isNode: Boolean = !_leafs.isEmpty
//    def isLeaf: Boolean = _leafs.isEmpty

/*
    def leaf[B](v: String): B = {
        val constructor = m.erasure.getConstructor(classOf[String], classOf[String] ,m.erasure)
        val l = constructor.newInstance(v,self).asInstanceOf[A]
        _leafs += l
        l.asInstanceOf[B]
    }
*/
/*
    def path(): String = {
        val p = parent.path()
        if(p.length == 0)
            value
        else
            p + op + value
    }
*/
    def paths(): List[String] = {
        paths((l: A) => true)
    }

    def paths(f: (A) => Boolean): List[String] = {
        def vals(node: A, nodes: List[String]): List[String] = {
            val ns = if(f(node)) node.path :: nodes
                     else nodes
            if(node._leafs.isEmpty)
                ns
            else
                ns ::: node._leafs.toList.map(l => vals(l,List.empty[String])).flatten
        }
        vals(self.asInstanceOf[A], List.empty[String])
    }


    def leafs(): List[StringLeaf[_]] = leafs((l: StringLeaf[_]) => true)
    def leafs(f: (StringLeaf[_]) => Boolean): List[StringLeaf[_]] = {
        _leafs.filter(f).toList
    }
}

object HZConfig {
    class Key[A](name: String, parent: StringNode[Key[_]])(implicit mA: ClassManifest[A]) extends StringLeaf[Key[_]](name,".",parent) {
        var validator = (op: Option[String], req: Boolean) => {
            op match {
                case Some(_) => true
                case None => ! req
            }
        }
        var required: Boolean = false

        def apply()(implicit conf: HZConfig): A = value()
        def optString()(implicit conf: HZConfig): Option[String] = conf(path())
        def optVal()(implicit conf: HZConfig): Option[A] = optString match {
            case Some(_) => Some(value())
            case None => None
        }

        private def getString(implicit conf: HZConfig): String = optString.get

        def value()(implicit conf: HZConfig): A = {
            val v = mA.erasure match {
                case c if(c == classOf[String]) => getString
                case c if(c == classOf[Int]) => getString.toInt
                case c if(c == classOf[Boolean]) => getString.toBoolean
                case c if(c == classOf[File]) => new File(getString)
                case c => throw new IllegalArgumentException("HZconfig.value:Unexpected type:%s".format(c))
            }

            v.asInstanceOf[A]
        }
/*
        def leaf[B](n: String, req: Boolean = false, vf: (Option[String],Boolean) => Boolean = validator)(implicit mB: ClassManifest[B]): Key[B] = {
            val l = new Key[B](n,this)
            l.validator = vf
            l.required = req
            l
        }
*/
        def validateNumber(op: Option[String], req: Boolean): Option[String] = op match {
            case Some(s) => catching(classOf[NumberFormatException]) opt s.toInt match {
                case Some(_) => None
                case None => Some("NumberFormatException:%s".format(s))
            }
            case None => if(req) Some("Required property not set") else None
        }

        def validateFile(op: Option[String], req: Boolean): Option[String] = op match {
            case Some(s) => {
                val f = new File(s)
                if(!f.exists)      Some("File not exitsts:%s".format(s))
                else if(!f.isFile) Some("File type is not file:%s".format(s))
                else None
            }
            case None => if(req) Some("Required property not set") else None
        }

        def validateBoolean(op: Option[String], req: Boolean): Option[String] = op match {
            case Some(b) => {
                b.toLowerCase match {
                    case "true" => None
                    case "false" => None
                    case s => Some("'%s' is not Boolean".format(s))
                }
            }
            case None => if(req) Some("Required property not set") else None
        }

        def validate()(implicit conf: HZConfig): Option[String] = {
            mA.erasure match {
                case c if(c == classOf[Int]) => validateNumber(optString, required)
                case c if(c == classOf[Boolean]) => validateBoolean(optString, required)
                case c if(c == classOf[File]) => validateFile(optString, required)
                case _ => None
            }
        }
/*
        def keies(): List[Key[_]] = keies((l: Key[_]) => true)
        def keies(f: (Key[_]) => Boolean): List[Key[_]] = {
            leafs.filter(f).toList
        }
*/
        override def toString(): String = path()
    }
/*
    object RootKey extends StringNode[]("root",null.asInstanceOf[Key[String]]) {
        override def path(): String = {
            ""
        }
    }
*/
}

/* vim: set expandtab: */
